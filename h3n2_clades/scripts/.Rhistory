propB = propB/(1+propB),
cohen_h = ES.h(propA, propB),
VE_ratio = VE_1 / VE_2,
VE_diff = VE_1 - VE_2,
samplesize = NA)
for(i in 1:nrow(data)){
if(data$cohen_h[i] !=0){
x = pwr.2p.test(h=data$cohen_h[i], power = .9)
data$samplesize[i] = x$n
}
}
subtype_ve = data.frame(subtype = c('H3N2', 'H1N1', 'B'),
ve = c(h3ve, h1ve,bve))
VE_summary_layer = function(base_plot, guide_title, scale_limits=NULL){
out = base_plot +
geom_tile() +
scale_fill_viridis(limits = scale_limits, guide = guide_colorbar(title.position = 'top', barwidth = 9.5 , barheight = .5,
title = guide_title)) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
plot_themes +
xlab(expression(VE[1])) +
ylab(expression(VE[2]))
return(out)
}
velines = function(plot){
plot = plot+
geom_hline(data = subtype_ve, aes(yintercept = ve, color=subtype), size=1.5) +
geom_vline(data = subtype_ve, aes(xintercept = ve, color=subtype), size = 1.5) +
scale_color_brewer(palette = 'Set2')
return(plot)
}
a = ggplot(data, aes(x = VE_1, y = VE_2, fill = propA)) %>%
VE_summary_layer(scale_limits = c(.37, .63), guide_title = expression(italic(P[A])~textstyle('(Freq strain 1 in pop A)')))
b = ggplot(data, aes(x = VE_1, y = VE_2, fill = propB))  %>%
VE_summary_layer(scale_limits = c(.37, .63), guide_title = expression(italic(P[B])~textstyle('(Freq strain 1 in pop B)')))
c = ggplot(data, aes(x = VE_1, y = VE_2, fill = propA - propB)) %>%
VE_summary_layer(guide_title = expression(italic(P[A]-P[B])))
d = ggplot(data, aes(x = VE_1, y = VE_2, fill = cohen_h)) %>%
VE_summary_layer(guide_title = expression(textstyle("Cohen's"~italic(h))))
VE_samplesize_layer = function(base_plot, guide_title){
out = base_plot+ geom_tile() +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis(guide = guide_colorbar(title.position = 'top', barwidth = 9, barheight =0.5,
title = guide_title))+
plot_themes +
xlab(expression(VE[1])) +
ylab(expression(VE[2]))
return(out)
}
e = ggplot(data %>% filter(samplesize < 5000),
aes(x = VE_1, y = VE_2, fill = samplesize)) %>%
VE_samplesize_layer(guide_title = 'N per population')
f = ggplot(data %>% filter(samplesize >= 5000 & samplesize < 20000),
aes(x = VE_1, y = VE_2, fill = samplesize)) %>%
VE_samplesize_layer(guide_title = 'N per population')
g = ggplot(data %>% filter(samplesize >= 20000 & samplesize < 50000),
aes(x = VE_1, y = VE_2, fill = samplesize)) %>%
VE_samplesize_layer(guide_title = 'N per population')
h = ggplot(data %>% filter(samplesize >= 50000 & samplesize < 200000),
aes(x = VE_1, y = VE_2, fill = samplesize)) %>%
VE_samplesize_layer(guide_title = 'N per population')
i = ggplot(data,
aes(x = VE_1, y = VE_2, fill = log(samplesize)))  %>%
VE_samplesize_layer(guide_title = 'Log N per population')
# sample sizes needed based on frequencies alone
j = ggplot(data,
aes(x = propA, y = propB, color = log(samplesize))) +
geom_point() +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_color_viridis(guide = guide_colorbar(title.position = 'top', barwidth = 9, barheight =0.5,
title = 'Log N per population'))+
plot_themes +
xlab(expression(italic(P[A]))) +
ylab(expression(italic(P[B])))
data_plot = plot_grid(a,b,c,d, labels= 'AUTO', nrow = 2)
power_plot = plot_grid(e,f,g,h,i,j, labels= 'AUTO', ncol = 2)
save_plot('plots/power_simdata.pdf',data_plot, nrow = 2, base_aspect_ratio = 1.8, base_height = 3.5)
save_plot('plots/power.pdf',power_plot, nrow = 3, base_aspect_ratio = 1.8, base_height = 3.5)
ve_n = get_ve() %>% filter(country == 'Canada')
library(tidyverse)
library(viridis)
library(cowplot)
library(pwr)
source('utils.R')
textSize = 10
plot_themes  = 	theme_classic() +
theme(axis.ticks = element_line(size=.5, color = 'black'),
axis.ticks.length = unit(-4,'pt'),
axis.text.x=element_text(size = textSize, color='black', margin=margin(7,7,0,7,'pt')),
axis.text.y=element_text(size = textSize, color='black', margin=margin(7,7,7,0,'pt')),
axis.title=element_text(size= textSize, color='black'),
plot.title=element_text(size=textSize+2, color='black'),
plot.margin=unit(c(9,9,9,9),'pt'),
legend.title=element_text(size=textSize, color='black'),
legend.text=element_text(size=textSize, color='black'),
legend.position ='bottom',
legend.direction='horizontal',
legend.margin=margin(l = 8, unit='pt'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.line = element_blank())
ve_n = get_ve() %>% filter(country == 'Canada')
h3ve = ve_n %>% pull(h3ve)
h1ve = ve_n %>% pull(h1ve)
bve = ve_n %>% pull(bve)
coverageA = .2
coverageB = .4
VEs = seq(0,1,length = 100)
data = expand.grid(VE_1 = VEs, VE_2 = VEs)
data = data %>%
mutate(propA = (1-coverageA*VE_1)/(1-coverageA*VE_2),
propB = (1-coverageB*VE_1)/(1-coverageB*VE_2)) %>%
mutate(propA = propA/(1+propA),
propB = propB/(1+propB),
cohen_h = ES.h(propA, propB),
VE_ratio = VE_1 / VE_2,
VE_diff = VE_1 - VE_2,
samplesize = NA)
for(i in 1:nrow(data)){
if(data$cohen_h[i] !=0){
x = pwr.2p.test(h=data$cohen_h[i], power = .9)
data$samplesize[i] = x$n
}
}
subtype_ve = data.frame(subtype = c('H3N2', 'H1N1', 'B'),
ve = c(h3ve, h1ve,bve))
VE_summary_layer = function(base_plot, guide_title, scale_limits=NULL){
out = base_plot +
geom_tile() +
scale_fill_viridis(limits = scale_limits, guide = guide_colorbar(title.position = 'top', barwidth = 9.5 , barheight = .5,
title = guide_title)) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
plot_themes +
xlab(expression(VE[1])) +
ylab(expression(VE[2]))
return(out)
}
velines = function(plot){
plot = plot+
geom_hline(data = subtype_ve, aes(yintercept = ve, color=subtype), size=1.5) +
geom_vline(data = subtype_ve, aes(xintercept = ve, color=subtype), size = 1.5) +
scale_color_brewer(palette = 'Set2')
return(plot)
}
a = ggplot(data, aes(x = VE_1, y = VE_2, fill = propA)) %>%
VE_summary_layer(scale_limits = c(.37, .63), guide_title = expression(italic(P[A])~textstyle('(Freq strain 1 in pop A)')))
b = ggplot(data, aes(x = VE_1, y = VE_2, fill = propB))  %>%
VE_summary_layer(scale_limits = c(.37, .63), guide_title = expression(italic(P[B])~textstyle('(Freq strain 1 in pop B)')))
c = ggplot(data, aes(x = VE_1, y = VE_2, fill = propA - propB)) %>%
VE_summary_layer(guide_title = expression(italic(P[A]-P[B])))
d = ggplot(data, aes(x = VE_1, y = VE_2, fill = cohen_h)) %>%
VE_summary_layer(guide_title = expression(textstyle("Cohen's"~italic(h))))
VE_samplesize_layer = function(base_plot, guide_title){
out = base_plot+ geom_tile() +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis(guide = guide_colorbar(title.position = 'top', barwidth = 9, barheight =0.5,
title = guide_title))+
plot_themes +
xlab(expression(VE[1])) +
ylab(expression(VE[2]))
return(out)
}
e = ggplot(data %>% filter(samplesize < 5000),
aes(x = VE_1, y = VE_2, fill = samplesize)) %>%
VE_samplesize_layer(guide_title = 'N per population')
f = ggplot(data %>% filter(samplesize >= 5000 & samplesize < 20000),
aes(x = VE_1, y = VE_2, fill = samplesize)) %>%
VE_samplesize_layer(guide_title = 'N per population')
g = ggplot(data %>% filter(samplesize >= 20000 & samplesize < 50000),
aes(x = VE_1, y = VE_2, fill = samplesize)) %>%
VE_samplesize_layer(guide_title = 'N per population')
h = ggplot(data %>% filter(samplesize >= 50000 & samplesize < 200000),
aes(x = VE_1, y = VE_2, fill = samplesize)) %>%
VE_samplesize_layer(guide_title = 'N per population')
i = ggplot(data,
aes(x = VE_1, y = VE_2, fill = log(samplesize)))  %>%
VE_samplesize_layer(guide_title = 'Log N per population')
# sample sizes needed based on frequencies alone
j = ggplot(data,
aes(x = propA, y = propB, color = log(samplesize))) +
geom_point() +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
scale_color_viridis(guide = guide_colorbar(title.position = 'top', barwidth = 9, barheight =0.5,
title = 'Log N per population'))+
plot_themes +
xlab(expression(italic(P[A]))) +
ylab(expression(italic(P[B])))
data_plot = plot_grid(a,b,c,d, labels= 'AUTO', nrow = 2)
power_plot = plot_grid(e,f,g,h,i,j, labels= 'AUTO', ncol = 2)
save_plot('plots/power_simdata.pdf',data_plot, nrow = 2, base_aspect_ratio = 1.8, base_height = 3.5)
save_plot('plots/power.pdf',power_plot, nrow = 3, base_aspect_ratio = 1.8, base_height = 3.5)
setwd("~/flu-vaccine-sieve-release/h3n2_clades/scripts")
setwd("~/flu-vaccine-sieve-release/h3n2_clades/scripts")
library(tidyverse)
library(binom)
library(stringi)
library(ggsci)
library(cowplot)
library(MultinomialCI)
plot_themes  = 	theme_classic() +
theme(axis.ticks = element_line(size=.5, color = 'black'),
axis.ticks.length = unit(-4,'pt'),
axis.text.x=element_text(size = textSize, color='black', margin=margin(7,7,0,7,'pt')),
axis.text.y=element_text(size = textSize, color='black', margin=margin(7,7,7,0,'pt')),
axis.title=element_text(size= textSize, color='black'),
plot.title=element_text(size=textSize+2, color='black'),
plot.margin=unit(c(9,9,9,9),'pt'),
legend.title=element_text(size=textSize, color='black'),
legend.text=element_text(size=textSize, color='black'),
# legend.position ='bottom',
# legend.direction='horizontal',
legend.margin=margin(l = 8, unit='pt'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.line = element_blank())
get_data = function(data, this_season){
strains = data %>%
filter(season == this_season) %>%
return(strains)
}
data = read_csv('../data/hi_h3n2_ha_12y_vaccine_antigenic_distances.csv')
names(data) = gsub( '/', '_',names(data))
this_season = '2014-2015'
strains = data %>%
filter(season == this_season)
strains$region_labels = gsub('_',' ',strains$region) %>% stri_trans_totitle()
strains = strains %>% filter(  region_labels %in% c('North America','Europe'))
strains
ggplot(strains, aes(x=A_Texas_50_2012)) +
geom_histogram(bins = 20) +
facet_wrap(~region)
ggplot(strains, aes(x=A_Texas_50_2012)) +
geom_histogram(bins = 20) +
facet_wrap(~region) +
xlab('HI antigenic distance to\nA/Texas/50/2012')
ggplot(strains, aes(x=A_Texas_50_2012)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
xlab('HI antigenic distance to\nA/Texas/50/2012') +
ylab('Number of viruses in 2014-2015')
ggplot(strains, aes(x=A_Texas_50_2012)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_fill_brewer(palette='Dark2') +
xlab('HI antigenic distance to\nA/Texas/50/2012') +
ylab('Number of viruses in 2014-2015')
ggplot(strains, aes(x=A_Texas_50_2012)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_fill_color(palette='Dark2') +
xlab('HI antigenic distance to\nA/Texas/50/2012') +
ylab('Number of viruses in 2014-2015')
ggplot(strains, aes(x=A_Texas_50_2012, color = region_label)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_fill_brewer(palette='Dark2') +
xlab('HI antigenic distance to\nA/Texas/50/2012') +
ylab('Number of viruses in 2014-2015')
ggplot(strains, aes(x=A_Texas_50_2012, color = region_labels)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_fill_brewer(palette='Dark2') +
xlab('HI antigenic distance to\nA/Texas/50/2012') +
ylab('Number of viruses in 2014-2015')
ggplot(strains, aes(x=A_Texas_50_2012, color = region_labels)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_fill_brewer(palette='Dark2') +
xlab('HI antigenic distance to\nA/Texas/50/2012') +
ylab('Number of viruses in 2014-2015')
ggplot(strains, aes(x=A_Texas_50_2012, color = region_labels)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_color_brewer(palette='Dark2') +
xlab('HI antigenic distance to\nA/Texas/50/2012') +
ylab('Number of viruses in 2014-2015')
?geom_histogram
ggplot(strains, aes(x=A_Texas_50_2012, fill = region_labels)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_fill_brewer(palette='Dark2') +
xlab('HI antigenic distance to\nA/Texas/50/2012') +
ylab('Number of viruses in 2014-2015')
get_data = function(file, this_season){
data = read_csv(file)
names(data) = gsub( '/', '_',names(data))
this_season = '2014-2015'
strains = data %>%
filter(season == this_season)
strains$region_labels = gsub('_',' ',strains$region) %>% stri_trans_totitle()
strains = strains %>% filter(  region_labels %in% c('North America','Europe'))
return(strains)
}
hi_data = get_data('../data/hi_h3n2_ha_12y_vaccine_antigenic_distances.csv')
ep_data = get_data('../data/ep_h3n2_ha_12y_vaccine_antigenic_distances.csv')
makeplot = function(data, xlab){
plot =
ggplot(data, aes(x=A_Texas_50_2012, fill = region_labels)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_fill_brewer(palette='Dark2') +
ylab('Number of viruses in 2014-2015')
return(plot)
}
makeplot(hi_data,"HI antigenic distance to\nA/Texas/50/2012")
makeplot(ep_data,"Epitope antigenic distance to\nA/Texas/50/2012")
hi_data
?t.test
t.test(hi_data$A_Texas_50_2012[hi_data$region == 'europe'], hi_data$A_Texas_50_2012[hi_data$region == 'north_america'], )
out = plot_grid(a,b, nrow = 2, labels = 'AUTO')
hi_data = get_data('../data/hi_h3n2_ha_12y_vaccine_antigenic_distances.csv')
ep_data = get_data('../data/ep_h3n2_ha_12y_vaccine_antigenic_distances.csv')
a = makeplot(hi_data,"HI antigenic distance to\nA/Texas/50/2012")
b = makeplot(ep_data,"Epitope antigenic distance to\nA/Texas/50/2012")
out = plot_grid(a,b, nrow = 2, labels = 'AUTO')
out
library(tidyverse)
library(cowplot)
plot_themes  = 	theme_classic() +
theme(axis.ticks = element_line(size=.5, color = 'black'),
axis.ticks.length = unit(-4,'pt'),
axis.text.x=element_text(size = textSize, color='black', margin=margin(7,7,0,7,'pt')),
axis.text.y=element_text(size = textSize, color='black', margin=margin(7,7,7,0,'pt')),
axis.title=element_text(size= textSize, color='black'),
plot.title=element_text(size=textSize+2, color='black'),
plot.margin=unit(c(9,9,9,9),'pt'),
legend.title=element_text(size=textSize, color='black'),
legend.text=element_text(size=textSize, color='black'),
# legend.position ='bottom',
# legend.direction='horizontal',
legend.margin=margin(l = 8, unit='pt'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.line = element_blank())
get_data = function(file, this_season){
data = read_csv(file)
names(data) = gsub( '/', '_',names(data))
this_season = '2014-2015'
strains = data %>%
filter(season == this_season)
strains$region_labels = gsub('_',' ',strains$region) %>% stri_trans_totitle()
strains = strains %>% filter(  region_labels %in% c('North America','Europe'))
return(strains)
}
makeplot = function(data, xlabel){
plot =
ggplot(data, aes(x=A_Texas_50_2012, fill = region_labels)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_fill_brewer(palette='Dark2', guide=F) +
ylab('Number of viruses in 2014-2015') +
xlab(xlabel)
return(plot)
}
hi_data = get_data('../data/hi_h3n2_ha_12y_vaccine_antigenic_distances.csv')
ep_data = get_data('../data/ep_h3n2_ha_12y_vaccine_antigenic_distances.csv')
a = makeplot(hi_data,"HI antigenic distance to\nA/Texas/50/2012")
b = makeplot(ep_data,"Epitope antigenic distance to\nA/Texas/50/2012")
out = plot_grid(a,b, nrow = 2, labels = 'AUTO')
save_plot('../plots/h3_distance.pdf', out, base_aspect_ratio = 2 )
t.test(hi_data$A_Texas_50_2012[hi_data$region == 'europe'], hi_data$A_Texas_50_2012[hi_data$region == 'north_america'])
t.test(ep_data$A_Texas_50_2012[ep_data$region == 'europe'], ep_data$A_Texas_50_2012[ep_data$region == 'north_america'])
save_plot('../plots/h3_distance.pdf', out, base_aspect_ratio =1.4 )
save_plot('../plots/h3_distance.pdf', out, base_aspect_ratio =1 )
save_plot('../plots/h3_distance.pdf', out, base_aspect_ratio =1, base_height=5 )
plot =
ggplot(data, aes(x=A_Texas_50_2012, fill = region_labels)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_fill_brewer(palette='Dark2', guide=F) +
ylab('Number of \nviruses in 2014-2015') +
xlab(xlabel)
makeplot = function(data, xlabel){
plot =
ggplot(data, aes(x=A_Texas_50_2012, fill = region_labels)) +
geom_histogram(bins = 20) +
facet_wrap(~region_labels) +
scale_fill_brewer(palette='Dark2', guide=F) +
ylab('Number of \nviruses in 2014-2015') +
xlab(xlabel)
return(plot)
}
hi_data = get_data('../data/hi_h3n2_ha_12y_vaccine_antigenic_distances.csv')
ep_data = get_data('../data/ep_h3n2_ha_12y_vaccine_antigenic_distances.csv')
a = makeplot(hi_data,"HI antigenic distance to\nA/Texas/50/2012")
b = makeplot(ep_data,"Epitope antigenic distance to\nA/Texas/50/2012")
out = plot_grid(a,b, nrow = 2, labels = 'AUTO')
save_plot('../plots/h3_distance.pdf', out, base_aspect_ratio =1, base_height=5 )
save_plot('../plots/h3_distance.pdf', out, base_aspect_ratio =.7, base_height=5 )
library(tidyverse)
library(binom)
library(stringi)
library(ggsci)
library(cowplot)
library(MultinomialCI)
plot_themes  = 	theme_classic() +
theme(axis.ticks = element_line(size=.5, color = 'black'),
axis.ticks.length = unit(-4,'pt'),
axis.text.x=element_text(size = textSize, color='black', margin=margin(7,7,0,7,'pt')),
axis.text.y=element_text(size = textSize, color='black', margin=margin(7,7,7,0,'pt')),
axis.title=element_text(size= textSize, color='black'),
plot.title=element_text(size=textSize+2, color='black'),
plot.margin=unit(c(9,9,9,9),'pt'),
legend.title=element_text(size=textSize, color='black'),
legend.text=element_text(size=textSize, color='black'),
# legend.position ='bottom',
# legend.direction='horizontal',
legend.margin=margin(l = 8, unit='pt'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.line = element_blank())
get_strains = function(data, this_season){
strains = data %>%
filter(season == this_season) %>%
mutate(clade_membership = ifelse(clade_membership %in% c('3c', '3c3'), 'ancestral', clade_membership)) %>%
group_by(region, clade_membership) %>%
summarise(counts = n()) %>% ungroup() %>%
group_by(region) %>%
spread(clade_membership, counts, fill=0) %>%
gather(clade_membership, counts, -region) %>%
mutate(total = sum(counts), freq = counts/total) %>%
ungroup() %>%
mutate(lower = NA, upper = NA) %>%
arrange(region)
for(this.region in unique(strains$region)){
CIs = multinomialCI(strains %>% filter(region == this.region) %>% pull(counts), alpha = .05)
strains[strains$region == this.region,][,c('lower','upper')] = CIs
}
return(strains)
}
make_plots = function(data, this_season){
regions_by_clade = ggplot(data, aes(x=clade_membership, y=freq)) +
geom_bar(stat = 'identity', aes(fill = clade_membership)) +
geom_errorbar(aes(ymin = lower, ymax=upper), width = .2) +
facet_wrap(~region_labels, nrow=1) +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
ylab('Frequency') + xlab('Clade') +
guides(fill='none') +
scale_fill_brewer(palette = 'Set1')
clades_by_region = ggplot(data, aes(x=region_labels, y=freq)) +
geom_bar(stat = 'identity', aes(fill = region_labels)) +
geom_errorbar(aes(ymin = lower, ymax=upper), width = .2) +
facet_wrap(~clade_membership, nrow=2) +
theme(axis.text.x = element_text(angle=45, hjust=1)) +
ylab('Frequency') + xlab('Region') +
guides(fill='none')# +
#scale_fill_brewer(palette = 'Set3')
# clades_3c2a_3c3b = ggplot(data %>% filter(clade_membership %in% c('3c2.A', '3c3.B')), aes(x=region_labels, y=freq)) +
#   geom_bar(stat = 'identity', aes(fill = region_labels)) +
#   geom_errorbar(aes(ymin = lower, ymax=upper), width = .2) +
#   facet_wrap(~clade_membership) +
#   theme(axis.text.x = element_text(angle=45, hjust=1)) +
#   ylab('Frequency') + xlab('Clade') +
#   guides(fill='none') #+
#  # scale_fill_brewer(palette = 'Set3')
save_plot(str_c('../plots/regions_by_clade_',this_season,'.pdf'),regions_by_clade, base_height=3,base_aspect_ratio = 1.8)
save_plot(str_c('../plots/clades_by_region_',this_season,'.pdf'),clades_by_region, base_height=3,base_aspect_ratio = 1.8)
#save_plot(str_c('../plots/clades_3c2a_3c3b_',this_season,'.pdf'),clades_3c2a_3c3b, base_aspect_ratio = 1.6)
}
data = read_csv('../data/hi_h3n2_ha_12y_vaccine_antigenic_distances.csv')
names(data) = gsub( '/', '_',names(data))
this_season = '2014-2015'
strains = get_strains(data = data, this_season = this_season)
strains$region_labels = gsub('_',' ',strains$region) %>% stri_trans_totitle()
strains = strains %>% filter(  region_labels %in% c('North America','Europe'))
compare.ratios = function(strains,clade1, clade2, ylabel){
ratios = strains %>% filter(clade_membership %in% c(clade1, clade2)) %>%
group_by(region) %>%
mutate(freq_old = freq) %>%
mutate(freq = freq_old/sum(freq_old),
total = sum(counts)) %>%
mutate(upper = freq + (upper-freq_old)/sum(freq_old),
lower = freq - (freq_old-lower)/sum(freq_old)) %>%
ungroup() %>%
mutate(err = max(upper-freq, freq-lower)) %>%
select(region, clade_membership, err, freq) %>%
spread(clade_membership, freq) %>%
as.data.frame()
ratios$ratio = ratios[,clade1]/ratios[,clade2]
ratios$err = ((ratios$err/ratios[,clade1])^2 + (ratios$err/ratios[,clade2])^2)^.5
ratios = ratios %>%
mutate(region = ifelse(region == 'europe', 'Europe', 'North America')) %>%
group_by(region) %>% mutate(
lowerCI = max(0,ratio - err),
upperCI = ratio+err)
print(ratios)
ratio_plot = ggplot(ratios, aes(x = region, y= ratio)) +
geom_bar(stat='identity', aes(fill = region)) +
scale_fill_brewer(palette = 'Dark2', guide = F) +
geom_errorbar(aes(ymin = lowerCI, ymax = upperCI), width = 0.5) +
xlab('Region') +
ylab(ylabel)
return(ratio_plot)
}
a = compare.ratios(strains,'3c2.A', '3c3.B', 'Ratio 3C2.a:3C3.b')
b = compare.ratios(strains,'3c2.A', 'ancestral', 'Ratio 3C2.a:Ancestral')
c = compare.ratios(strains,'3c3.B', 'ancestral', 'Ratio 3C3.b:Ancestral')
expect_plot = ggplot(data.frame(x=c(1,3), y=c(.2,1)), aes(x=x, y=y)) +
geom_line(color = 'blue') +
geom_point(color = 'blue') +
theme(axis.title = element_blank(),
axis.text=element_blank(),
axis.ticks = element_blank(),
plot.margin=unit(c(10,10,5,40),'pt')) +
xlim(c(0,4)) + ylim(c(0,1))
ratio_row = plot_grid(a, b, c, nrow = 1)#labels='AUTO', nrow=1)
expectation_row = plot_grid(expect_plot, expect_plot, expect_plot, nrow = 1, labels='AUTO')
ratio_plot = plot_grid(expectation_row, ratio_row, ncol=1, rel_heights = c(.25,1))
save_plot('../plots/h3n2_ratios.pdf',ratio_plot, base_aspect_ratio = 3,base_height=3.5)
make_plots(strains, this_season)
